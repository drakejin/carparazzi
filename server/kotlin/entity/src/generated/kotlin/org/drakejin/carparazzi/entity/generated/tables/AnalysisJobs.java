/*
 * This file is generated by jOOQ.
 */
package org.drakejin.carparazzi.entity.generated.tables;


import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import java.util.function.Function;

import org.drakejin.carparazzi.entity.generated.Indexes;
import org.drakejin.carparazzi.entity.generated.Keys;
import org.drakejin.carparazzi.entity.generated.Public;
import org.drakejin.carparazzi.entity.generated.tables.records.AnalysisJobsRecord;
import org.jooq.Check;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function10;
import org.jooq.Index;
import org.jooq.JSONB;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class AnalysisJobs extends TableImpl<AnalysisJobsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.analysis_jobs</code>
     */
    public static final AnalysisJobs ANALYSIS_JOBS = new AnalysisJobs();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AnalysisJobsRecord> getRecordType() {
        return AnalysisJobsRecord.class;
    }

    /**
     * The column <code>public.analysis_jobs.job_id</code>.
     */
    public final TableField<AnalysisJobsRecord, UUID> JOB_ID = createField(DSL.name("job_id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field(DSL.raw("gen_random_uuid()"), SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.analysis_jobs.upload_id</code>.
     */
    public final TableField<AnalysisJobsRecord, UUID> UPLOAD_ID = createField(DSL.name("upload_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.analysis_jobs.job_status</code>.
     */
    public final TableField<AnalysisJobsRecord, String> JOB_STATUS = createField(DSL.name("job_status"), SQLDataType.VARCHAR(20).defaultValue(DSL.field(DSL.raw("'QUEUED'::character varying"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>public.analysis_jobs.started_at</code>.
     */
    public final TableField<AnalysisJobsRecord, OffsetDateTime> STARTED_AT = createField(DSL.name("started_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column <code>public.analysis_jobs.completed_at</code>.
     */
    public final TableField<AnalysisJobsRecord, OffsetDateTime> COMPLETED_AT = createField(DSL.name("completed_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column <code>public.analysis_jobs.processing_time_ms</code>.
     */
    public final TableField<AnalysisJobsRecord, Long> PROCESSING_TIME_MS = createField(DSL.name("processing_time_ms"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.analysis_jobs.total_segments</code>.
     */
    public final TableField<AnalysisJobsRecord, Integer> TOTAL_SEGMENTS = createField(DSL.name("total_segments"), SQLDataType.INTEGER.defaultValue(DSL.field(DSL.raw("0"), SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.analysis_jobs.total_violations_detected</code>.
     */
    public final TableField<AnalysisJobsRecord, Integer> TOTAL_VIOLATIONS_DETECTED = createField(DSL.name("total_violations_detected"), SQLDataType.INTEGER.defaultValue(DSL.field(DSL.raw("0"), SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.analysis_jobs.error_message</code>.
     */
    public final TableField<AnalysisJobsRecord, String> ERROR_MESSAGE = createField(DSL.name("error_message"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.analysis_jobs.processing_metadata</code>.
     */
    public final TableField<AnalysisJobsRecord, JSONB> PROCESSING_METADATA = createField(DSL.name("processing_metadata"), SQLDataType.JSONB, this, "");

    private AnalysisJobs(Name alias, Table<AnalysisJobsRecord> aliased) {
        this(alias, aliased, null);
    }

    private AnalysisJobs(Name alias, Table<AnalysisJobsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.analysis_jobs</code> table reference
     */
    public AnalysisJobs(String alias) {
        this(DSL.name(alias), ANALYSIS_JOBS);
    }

    /**
     * Create an aliased <code>public.analysis_jobs</code> table reference
     */
    public AnalysisJobs(Name alias) {
        this(alias, ANALYSIS_JOBS);
    }

    /**
     * Create a <code>public.analysis_jobs</code> table reference
     */
    public AnalysisJobs() {
        this(DSL.name("analysis_jobs"), null);
    }

    public <O extends Record> AnalysisJobs(Table<O> child, ForeignKey<O, AnalysisJobsRecord> key) {
        super(child, key, ANALYSIS_JOBS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_ACTIVE_JOBS, Indexes.IDX_ANALYSIS_JOBS_STARTED_AT, Indexes.IDX_ANALYSIS_JOBS_STATUS, Indexes.IDX_ANALYSIS_JOBS_UPLOAD_ID, Indexes.IDX_ANALYSIS_JOBS_UPLOAD_UNIQUE, Indexes.IDX_JOBS_STATUS_STARTED);
    }

    @Override
    public UniqueKey<AnalysisJobsRecord> getPrimaryKey() {
        return Keys.ANALYSIS_JOBS_PKEY;
    }

    @Override
    public List<ForeignKey<AnalysisJobsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.ANALYSIS_JOBS__ANALYSIS_JOBS_UPLOAD_ID_FKEY);
    }

    private transient VideoUploads _videoUploads;

    /**
     * Get the implicit join path to the <code>public.video_uploads</code>
     * table.
     */
    public VideoUploads videoUploads() {
        if (_videoUploads == null)
            _videoUploads = new VideoUploads(this, Keys.ANALYSIS_JOBS__ANALYSIS_JOBS_UPLOAD_ID_FKEY);

        return _videoUploads;
    }

    @Override
    public List<Check<AnalysisJobsRecord>> getChecks() {
        return Arrays.asList(
            Internal.createCheck(this, DSL.name("analysis_jobs_job_status_check"), "(((job_status)::text = ANY ((ARRAY['QUEUED'::character varying, 'PROCESSING'::character varying, 'COMPLETED'::character varying, 'FAILED'::character varying])::text[])))", true),
            Internal.createCheck(this, DSL.name("analysis_jobs_processing_time_ms_check"), "((processing_time_ms >= 0))", true),
            Internal.createCheck(this, DSL.name("analysis_jobs_total_segments_check"), "((total_segments >= 0))", true),
            Internal.createCheck(this, DSL.name("analysis_jobs_total_violations_detected_check"), "((total_violations_detected >= 0))", true)
        );
    }

    @Override
    public AnalysisJobs as(String alias) {
        return new AnalysisJobs(DSL.name(alias), this);
    }

    @Override
    public AnalysisJobs as(Name alias) {
        return new AnalysisJobs(alias, this);
    }

    @Override
    public AnalysisJobs as(Table<?> alias) {
        return new AnalysisJobs(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public AnalysisJobs rename(String name) {
        return new AnalysisJobs(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AnalysisJobs rename(Name name) {
        return new AnalysisJobs(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public AnalysisJobs rename(Table<?> name) {
        return new AnalysisJobs(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<UUID, UUID, String, OffsetDateTime, OffsetDateTime, Long, Integer, Integer, String, JSONB> fieldsRow() {
        return (Row10) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function10<? super UUID, ? super UUID, ? super String, ? super OffsetDateTime, ? super OffsetDateTime, ? super Long, ? super Integer, ? super Integer, ? super String, ? super JSONB, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function10<? super UUID, ? super UUID, ? super String, ? super OffsetDateTime, ? super OffsetDateTime, ? super Long, ? super Integer, ? super Integer, ? super String, ? super JSONB, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
