/*
 * This file is generated by jOOQ.
 */
package org.drakejin.carparazzi.entity.generated.tables;


import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import java.util.function.Function;

import org.drakejin.carparazzi.entity.generated.Indexes;
import org.drakejin.carparazzi.entity.generated.Keys;
import org.drakejin.carparazzi.entity.generated.Public;
import org.drakejin.carparazzi.entity.generated.tables.records.ViolationEventsRecord;
import org.jooq.Check;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function9;
import org.jooq.Index;
import org.jooq.JSONB;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class ViolationEvents extends TableImpl<ViolationEventsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.violation_events</code>
     */
    public static final ViolationEvents VIOLATION_EVENTS = new ViolationEvents();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ViolationEventsRecord> getRecordType() {
        return ViolationEventsRecord.class;
    }

    /**
     * The column <code>public.violation_events.violation_id</code>.
     */
    public final TableField<ViolationEventsRecord, UUID> VIOLATION_ID = createField(DSL.name("violation_id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field(DSL.raw("gen_random_uuid()"), SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.violation_events.job_id</code>.
     */
    public final TableField<ViolationEventsRecord, UUID> JOB_ID = createField(DSL.name("job_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.violation_events.violation_type</code>.
     */
    public final TableField<ViolationEventsRecord, String> VIOLATION_TYPE = createField(DSL.name("violation_type"), SQLDataType.VARCHAR(30).nullable(false), this, "");

    /**
     * The column <code>public.violation_events.timestamp_seconds</code>.
     */
    public final TableField<ViolationEventsRecord, BigDecimal> TIMESTAMP_SECONDS = createField(DSL.name("timestamp_seconds"), SQLDataType.NUMERIC(10, 3).nullable(false), this, "");

    /**
     * The column <code>public.violation_events.confidence_score</code>.
     */
    public final TableField<ViolationEventsRecord, BigDecimal> CONFIDENCE_SCORE = createField(DSL.name("confidence_score"), SQLDataType.NUMERIC(5, 4).nullable(false), this, "");

    /**
     * The column <code>public.violation_events.severity_level</code>.
     */
    public final TableField<ViolationEventsRecord, String> SEVERITY_LEVEL = createField(DSL.name("severity_level"), SQLDataType.VARCHAR(10).defaultValue(DSL.field(DSL.raw("'MEDIUM'::character varying"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>public.violation_events.description</code>.
     */
    public final TableField<ViolationEventsRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.violation_events.detection_metadata</code>.
     */
    public final TableField<ViolationEventsRecord, JSONB> DETECTION_METADATA = createField(DSL.name("detection_metadata"), SQLDataType.JSONB, this, "");

    /**
     * The column <code>public.violation_events.detected_at</code>.
     */
    public final TableField<ViolationEventsRecord, OffsetDateTime> DETECTED_AT = createField(DSL.name("detected_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    private ViolationEvents(Name alias, Table<ViolationEventsRecord> aliased) {
        this(alias, aliased, null);
    }

    private ViolationEvents(Name alias, Table<ViolationEventsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.violation_events</code> table reference
     */
    public ViolationEvents(String alias) {
        this(DSL.name(alias), VIOLATION_EVENTS);
    }

    /**
     * Create an aliased <code>public.violation_events</code> table reference
     */
    public ViolationEvents(Name alias) {
        this(alias, VIOLATION_EVENTS);
    }

    /**
     * Create a <code>public.violation_events</code> table reference
     */
    public ViolationEvents() {
        this(DSL.name("violation_events"), null);
    }

    public <O extends Record> ViolationEvents(Table<O> child, ForeignKey<O, ViolationEventsRecord> key) {
        super(child, key, VIOLATION_EVENTS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_VIOLATION_EVENTS_CONFIDENCE, Indexes.IDX_VIOLATION_EVENTS_JOB_ID, Indexes.IDX_VIOLATION_EVENTS_SEVERITY, Indexes.IDX_VIOLATION_EVENTS_TIMESTAMP, Indexes.IDX_VIOLATION_EVENTS_TYPE);
    }

    @Override
    public UniqueKey<ViolationEventsRecord> getPrimaryKey() {
        return Keys.VIOLATION_EVENTS_PKEY;
    }

    @Override
    public List<ForeignKey<ViolationEventsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.VIOLATION_EVENTS__VIOLATION_EVENTS_JOB_ID_FKEY);
    }

    private transient AnalysisJobs _analysisJobs;

    /**
     * Get the implicit join path to the <code>public.analysis_jobs</code>
     * table.
     */
    public AnalysisJobs analysisJobs() {
        if (_analysisJobs == null)
            _analysisJobs = new AnalysisJobs(this, Keys.VIOLATION_EVENTS__VIOLATION_EVENTS_JOB_ID_FKEY);

        return _analysisJobs;
    }

    @Override
    public List<Check<ViolationEventsRecord>> getChecks() {
        return Arrays.asList(
            Internal.createCheck(this, DSL.name("violation_events_confidence_score_check"), "(((confidence_score >= (0)::numeric) AND (confidence_score <= (1)::numeric)))", true),
            Internal.createCheck(this, DSL.name("violation_events_severity_level_check"), "(((severity_level)::text = ANY ((ARRAY['LOW'::character varying, 'MEDIUM'::character varying, 'HIGH'::character varying, 'CRITICAL'::character varying])::text[])))", true),
            Internal.createCheck(this, DSL.name("violation_events_timestamp_seconds_check"), "((timestamp_seconds >= (0)::numeric))", true),
            Internal.createCheck(this, DSL.name("violation_events_violation_type_check"), "(((violation_type)::text = ANY ((ARRAY['SIGNAL_VIOLATION'::character varying, 'LANE_VIOLATION'::character varying, 'COLLISION'::character varying, 'SUDDEN_BRAKING'::character varying, 'SUDDEN_ACCELERATION'::character varying, 'SPEEDING'::character varying, 'ILLEGAL_TURN'::character varying, 'ROAD_RAGE'::character varying])::text[])))", true)
        );
    }

    @Override
    public ViolationEvents as(String alias) {
        return new ViolationEvents(DSL.name(alias), this);
    }

    @Override
    public ViolationEvents as(Name alias) {
        return new ViolationEvents(alias, this);
    }

    @Override
    public ViolationEvents as(Table<?> alias) {
        return new ViolationEvents(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ViolationEvents rename(String name) {
        return new ViolationEvents(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ViolationEvents rename(Name name) {
        return new ViolationEvents(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ViolationEvents rename(Table<?> name) {
        return new ViolationEvents(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<UUID, UUID, String, BigDecimal, BigDecimal, String, String, JSONB, OffsetDateTime> fieldsRow() {
        return (Row9) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function9<? super UUID, ? super UUID, ? super String, ? super BigDecimal, ? super BigDecimal, ? super String, ? super String, ? super JSONB, ? super OffsetDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function9<? super UUID, ? super UUID, ? super String, ? super BigDecimal, ? super BigDecimal, ? super String, ? super String, ? super JSONB, ? super OffsetDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
