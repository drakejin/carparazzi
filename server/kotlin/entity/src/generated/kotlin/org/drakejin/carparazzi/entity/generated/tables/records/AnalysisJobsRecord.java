/*
 * This file is generated by jOOQ.
 */
package org.drakejin.carparazzi.entity.generated.tables.records;


import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;

import java.time.OffsetDateTime;
import java.util.UUID;

import org.drakejin.carparazzi.entity.generated.tables.AnalysisJobs;
import org.jooq.Field;
import org.jooq.JSONB;
import org.jooq.Record1;
import org.jooq.Record10;
import org.jooq.Row10;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class AnalysisJobsRecord extends UpdatableRecordImpl<AnalysisJobsRecord> implements Record10<UUID, UUID, String, OffsetDateTime, OffsetDateTime, Long, Integer, Integer, String, JSONB> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.analysis_jobs.job_id</code>.
     */
    public AnalysisJobsRecord setJobId(UUID value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.analysis_jobs.job_id</code>.
     */
    public UUID getJobId() {
        return (UUID) get(0);
    }

    /**
     * Setter for <code>public.analysis_jobs.upload_id</code>.
     */
    public AnalysisJobsRecord setUploadId(UUID value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.analysis_jobs.upload_id</code>.
     */
    @NotNull
    public UUID getUploadId() {
        return (UUID) get(1);
    }

    /**
     * Setter for <code>public.analysis_jobs.job_status</code>.
     */
    public AnalysisJobsRecord setJobStatus(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>public.analysis_jobs.job_status</code>.
     */
    @Size(max = 20)
    public String getJobStatus() {
        return (String) get(2);
    }

    /**
     * Setter for <code>public.analysis_jobs.started_at</code>.
     */
    public AnalysisJobsRecord setStartedAt(OffsetDateTime value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>public.analysis_jobs.started_at</code>.
     */
    public OffsetDateTime getStartedAt() {
        return (OffsetDateTime) get(3);
    }

    /**
     * Setter for <code>public.analysis_jobs.completed_at</code>.
     */
    public AnalysisJobsRecord setCompletedAt(OffsetDateTime value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>public.analysis_jobs.completed_at</code>.
     */
    public OffsetDateTime getCompletedAt() {
        return (OffsetDateTime) get(4);
    }

    /**
     * Setter for <code>public.analysis_jobs.processing_time_ms</code>.
     */
    public AnalysisJobsRecord setProcessingTimeMs(Long value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>public.analysis_jobs.processing_time_ms</code>.
     */
    public Long getProcessingTimeMs() {
        return (Long) get(5);
    }

    /**
     * Setter for <code>public.analysis_jobs.total_segments</code>.
     */
    public AnalysisJobsRecord setTotalSegments(Integer value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>public.analysis_jobs.total_segments</code>.
     */
    public Integer getTotalSegments() {
        return (Integer) get(6);
    }

    /**
     * Setter for <code>public.analysis_jobs.total_violations_detected</code>.
     */
    public AnalysisJobsRecord setTotalViolationsDetected(Integer value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>public.analysis_jobs.total_violations_detected</code>.
     */
    public Integer getTotalViolationsDetected() {
        return (Integer) get(7);
    }

    /**
     * Setter for <code>public.analysis_jobs.error_message</code>.
     */
    public AnalysisJobsRecord setErrorMessage(String value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for <code>public.analysis_jobs.error_message</code>.
     */
    public String getErrorMessage() {
        return (String) get(8);
    }

    /**
     * Setter for <code>public.analysis_jobs.processing_metadata</code>.
     */
    public AnalysisJobsRecord setProcessingMetadata(JSONB value) {
        set(9, value);
        return this;
    }

    /**
     * Getter for <code>public.analysis_jobs.processing_metadata</code>.
     */
    public JSONB getProcessingMetadata() {
        return (JSONB) get(9);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<UUID> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record10 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row10<UUID, UUID, String, OffsetDateTime, OffsetDateTime, Long, Integer, Integer, String, JSONB> fieldsRow() {
        return (Row10) super.fieldsRow();
    }

    @Override
    public Row10<UUID, UUID, String, OffsetDateTime, OffsetDateTime, Long, Integer, Integer, String, JSONB> valuesRow() {
        return (Row10) super.valuesRow();
    }

    @Override
    public Field<UUID> field1() {
        return AnalysisJobs.ANALYSIS_JOBS.JOB_ID;
    }

    @Override
    public Field<UUID> field2() {
        return AnalysisJobs.ANALYSIS_JOBS.UPLOAD_ID;
    }

    @Override
    public Field<String> field3() {
        return AnalysisJobs.ANALYSIS_JOBS.JOB_STATUS;
    }

    @Override
    public Field<OffsetDateTime> field4() {
        return AnalysisJobs.ANALYSIS_JOBS.STARTED_AT;
    }

    @Override
    public Field<OffsetDateTime> field5() {
        return AnalysisJobs.ANALYSIS_JOBS.COMPLETED_AT;
    }

    @Override
    public Field<Long> field6() {
        return AnalysisJobs.ANALYSIS_JOBS.PROCESSING_TIME_MS;
    }

    @Override
    public Field<Integer> field7() {
        return AnalysisJobs.ANALYSIS_JOBS.TOTAL_SEGMENTS;
    }

    @Override
    public Field<Integer> field8() {
        return AnalysisJobs.ANALYSIS_JOBS.TOTAL_VIOLATIONS_DETECTED;
    }

    @Override
    public Field<String> field9() {
        return AnalysisJobs.ANALYSIS_JOBS.ERROR_MESSAGE;
    }

    @Override
    public Field<JSONB> field10() {
        return AnalysisJobs.ANALYSIS_JOBS.PROCESSING_METADATA;
    }

    @Override
    public UUID component1() {
        return getJobId();
    }

    @Override
    public UUID component2() {
        return getUploadId();
    }

    @Override
    public String component3() {
        return getJobStatus();
    }

    @Override
    public OffsetDateTime component4() {
        return getStartedAt();
    }

    @Override
    public OffsetDateTime component5() {
        return getCompletedAt();
    }

    @Override
    public Long component6() {
        return getProcessingTimeMs();
    }

    @Override
    public Integer component7() {
        return getTotalSegments();
    }

    @Override
    public Integer component8() {
        return getTotalViolationsDetected();
    }

    @Override
    public String component9() {
        return getErrorMessage();
    }

    @Override
    public JSONB component10() {
        return getProcessingMetadata();
    }

    @Override
    public UUID value1() {
        return getJobId();
    }

    @Override
    public UUID value2() {
        return getUploadId();
    }

    @Override
    public String value3() {
        return getJobStatus();
    }

    @Override
    public OffsetDateTime value4() {
        return getStartedAt();
    }

    @Override
    public OffsetDateTime value5() {
        return getCompletedAt();
    }

    @Override
    public Long value6() {
        return getProcessingTimeMs();
    }

    @Override
    public Integer value7() {
        return getTotalSegments();
    }

    @Override
    public Integer value8() {
        return getTotalViolationsDetected();
    }

    @Override
    public String value9() {
        return getErrorMessage();
    }

    @Override
    public JSONB value10() {
        return getProcessingMetadata();
    }

    @Override
    public AnalysisJobsRecord value1(UUID value) {
        setJobId(value);
        return this;
    }

    @Override
    public AnalysisJobsRecord value2(UUID value) {
        setUploadId(value);
        return this;
    }

    @Override
    public AnalysisJobsRecord value3(String value) {
        setJobStatus(value);
        return this;
    }

    @Override
    public AnalysisJobsRecord value4(OffsetDateTime value) {
        setStartedAt(value);
        return this;
    }

    @Override
    public AnalysisJobsRecord value5(OffsetDateTime value) {
        setCompletedAt(value);
        return this;
    }

    @Override
    public AnalysisJobsRecord value6(Long value) {
        setProcessingTimeMs(value);
        return this;
    }

    @Override
    public AnalysisJobsRecord value7(Integer value) {
        setTotalSegments(value);
        return this;
    }

    @Override
    public AnalysisJobsRecord value8(Integer value) {
        setTotalViolationsDetected(value);
        return this;
    }

    @Override
    public AnalysisJobsRecord value9(String value) {
        setErrorMessage(value);
        return this;
    }

    @Override
    public AnalysisJobsRecord value10(JSONB value) {
        setProcessingMetadata(value);
        return this;
    }

    @Override
    public AnalysisJobsRecord values(UUID value1, UUID value2, String value3, OffsetDateTime value4, OffsetDateTime value5, Long value6, Integer value7, Integer value8, String value9, JSONB value10) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached AnalysisJobsRecord
     */
    public AnalysisJobsRecord() {
        super(AnalysisJobs.ANALYSIS_JOBS);
    }

    /**
     * Create a detached, initialised AnalysisJobsRecord
     */
    public AnalysisJobsRecord(UUID jobId, UUID uploadId, String jobStatus, OffsetDateTime startedAt, OffsetDateTime completedAt, Long processingTimeMs, Integer totalSegments, Integer totalViolationsDetected, String errorMessage, JSONB processingMetadata) {
        super(AnalysisJobs.ANALYSIS_JOBS);

        setJobId(jobId);
        setUploadId(uploadId);
        setJobStatus(jobStatus);
        setStartedAt(startedAt);
        setCompletedAt(completedAt);
        setProcessingTimeMs(processingTimeMs);
        setTotalSegments(totalSegments);
        setTotalViolationsDetected(totalViolationsDetected);
        setErrorMessage(errorMessage);
        setProcessingMetadata(processingMetadata);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised AnalysisJobsRecord
     */
    public AnalysisJobsRecord(org.drakejin.carparazzi.entity.generated.tables.pojos.AnalysisJobs value) {
        super(AnalysisJobs.ANALYSIS_JOBS);

        if (value != null) {
            setJobId(value.getJobId());
            setUploadId(value.getUploadId());
            setJobStatus(value.getJobStatus());
            setStartedAt(value.getStartedAt());
            setCompletedAt(value.getCompletedAt());
            setProcessingTimeMs(value.getProcessingTimeMs());
            setTotalSegments(value.getTotalSegments());
            setTotalViolationsDetected(value.getTotalViolationsDetected());
            setErrorMessage(value.getErrorMessage());
            setProcessingMetadata(value.getProcessingMetadata());
            resetChangedOnNotNull();
        }
    }
}
