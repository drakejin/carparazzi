/*
 * This file is generated by jOOQ.
 */
package org.drakejin.carparazzi.entity.generated.tables;


import java.math.BigDecimal;
import java.util.function.Function;

import org.drakejin.carparazzi.entity.generated.Public;
import org.drakejin.carparazzi.entity.generated.tables.records.ViolationTypeStatsRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function7;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class ViolationTypeStats extends TableImpl<ViolationTypeStatsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.violation_type_stats</code>
     */
    public static final ViolationTypeStats VIOLATION_TYPE_STATS = new ViolationTypeStats();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ViolationTypeStatsRecord> getRecordType() {
        return ViolationTypeStatsRecord.class;
    }

    /**
     * The column <code>public.violation_type_stats.violation_type</code>.
     */
    public final TableField<ViolationTypeStatsRecord, String> VIOLATION_TYPE = createField(DSL.name("violation_type"), SQLDataType.VARCHAR(30), this, "");

    /**
     * The column <code>public.violation_type_stats.total_count</code>.
     */
    public final TableField<ViolationTypeStatsRecord, Long> TOTAL_COUNT = createField(DSL.name("total_count"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.violation_type_stats.avg_confidence</code>.
     */
    public final TableField<ViolationTypeStatsRecord, BigDecimal> AVG_CONFIDENCE = createField(DSL.name("avg_confidence"), SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>public.violation_type_stats.critical_count</code>.
     */
    public final TableField<ViolationTypeStatsRecord, Long> CRITICAL_COUNT = createField(DSL.name("critical_count"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.violation_type_stats.high_count</code>.
     */
    public final TableField<ViolationTypeStatsRecord, Long> HIGH_COUNT = createField(DSL.name("high_count"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.violation_type_stats.medium_count</code>.
     */
    public final TableField<ViolationTypeStatsRecord, Long> MEDIUM_COUNT = createField(DSL.name("medium_count"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.violation_type_stats.low_count</code>.
     */
    public final TableField<ViolationTypeStatsRecord, Long> LOW_COUNT = createField(DSL.name("low_count"), SQLDataType.BIGINT, this, "");

    private ViolationTypeStats(Name alias, Table<ViolationTypeStatsRecord> aliased) {
        this(alias, aliased, null);
    }

    private ViolationTypeStats(Name alias, Table<ViolationTypeStatsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view("""
        create view "violation_type_stats" as  SELECT violation_type,
          count(*) AS total_count,
          avg(confidence_score) AS avg_confidence,
          count(
              CASE
                  WHEN ((severity_level)::text = 'CRITICAL'::text) THEN 1
                  ELSE NULL::integer
              END) AS critical_count,
          count(
              CASE
                  WHEN ((severity_level)::text = 'HIGH'::text) THEN 1
                  ELSE NULL::integer
              END) AS high_count,
          count(
              CASE
                  WHEN ((severity_level)::text = 'MEDIUM'::text) THEN 1
                  ELSE NULL::integer
              END) AS medium_count,
          count(
              CASE
                  WHEN ((severity_level)::text = 'LOW'::text) THEN 1
                  ELSE NULL::integer
              END) AS low_count
         FROM violation_events
        GROUP BY violation_type
        ORDER BY (count(*)) DESC;
        """));
    }

    /**
     * Create an aliased <code>public.violation_type_stats</code> table
     * reference
     */
    public ViolationTypeStats(String alias) {
        this(DSL.name(alias), VIOLATION_TYPE_STATS);
    }

    /**
     * Create an aliased <code>public.violation_type_stats</code> table
     * reference
     */
    public ViolationTypeStats(Name alias) {
        this(alias, VIOLATION_TYPE_STATS);
    }

    /**
     * Create a <code>public.violation_type_stats</code> table reference
     */
    public ViolationTypeStats() {
        this(DSL.name("violation_type_stats"), null);
    }

    public <O extends Record> ViolationTypeStats(Table<O> child, ForeignKey<O, ViolationTypeStatsRecord> key) {
        super(child, key, VIOLATION_TYPE_STATS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public ViolationTypeStats as(String alias) {
        return new ViolationTypeStats(DSL.name(alias), this);
    }

    @Override
    public ViolationTypeStats as(Name alias) {
        return new ViolationTypeStats(alias, this);
    }

    @Override
    public ViolationTypeStats as(Table<?> alias) {
        return new ViolationTypeStats(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ViolationTypeStats rename(String name) {
        return new ViolationTypeStats(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ViolationTypeStats rename(Name name) {
        return new ViolationTypeStats(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ViolationTypeStats rename(Table<?> name) {
        return new ViolationTypeStats(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<String, Long, BigDecimal, Long, Long, Long, Long> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function7<? super String, ? super Long, ? super BigDecimal, ? super Long, ? super Long, ? super Long, ? super Long, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function7<? super String, ? super Long, ? super BigDecimal, ? super Long, ? super Long, ? super Long, ? super Long, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
