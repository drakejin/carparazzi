/*
 * This file is generated by jOOQ.
 */
package org.drakejin.carparazzi.entity.generated.tables;


import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import java.util.function.Function;

import org.drakejin.carparazzi.entity.generated.Indexes;
import org.drakejin.carparazzi.entity.generated.Keys;
import org.drakejin.carparazzi.entity.generated.Public;
import org.drakejin.carparazzi.entity.generated.tables.records.EvidenceClipsRecord;
import org.jooq.Check;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function12;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row12;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class EvidenceClips extends TableImpl<EvidenceClipsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.evidence_clips</code>
     */
    public static final EvidenceClips EVIDENCE_CLIPS = new EvidenceClips();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EvidenceClipsRecord> getRecordType() {
        return EvidenceClipsRecord.class;
    }

    /**
     * The column <code>public.evidence_clips.clip_id</code>.
     */
    public final TableField<EvidenceClipsRecord, UUID> CLIP_ID = createField(DSL.name("clip_id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field(DSL.raw("gen_random_uuid()"), SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.evidence_clips.violation_id</code>.
     */
    public final TableField<EvidenceClipsRecord, UUID> VIOLATION_ID = createField(DSL.name("violation_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.evidence_clips.job_id</code>.
     */
    public final TableField<EvidenceClipsRecord, UUID> JOB_ID = createField(DSL.name("job_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.evidence_clips.s3_key</code>.
     */
    public final TableField<EvidenceClipsRecord, String> S3_KEY = createField(DSL.name("s3_key"), SQLDataType.VARCHAR(500).nullable(false), this, "");

    /**
     * The column <code>public.evidence_clips.start_time_seconds</code>.
     */
    public final TableField<EvidenceClipsRecord, BigDecimal> START_TIME_SECONDS = createField(DSL.name("start_time_seconds"), SQLDataType.NUMERIC(10, 3).nullable(false), this, "");

    /**
     * The column <code>public.evidence_clips.end_time_seconds</code>.
     */
    public final TableField<EvidenceClipsRecord, BigDecimal> END_TIME_SECONDS = createField(DSL.name("end_time_seconds"), SQLDataType.NUMERIC(10, 3).nullable(false), this, "");

    /**
     * The column <code>public.evidence_clips.duration_seconds</code>.
     */
    public final TableField<EvidenceClipsRecord, BigDecimal> DURATION_SECONDS = createField(DSL.name("duration_seconds"), SQLDataType.NUMERIC(10, 3), this, "");

    /**
     * The column <code>public.evidence_clips.file_size_bytes</code>.
     */
    public final TableField<EvidenceClipsRecord, Long> FILE_SIZE_BYTES = createField(DSL.name("file_size_bytes"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.evidence_clips.clip_status</code>.
     */
    public final TableField<EvidenceClipsRecord, String> CLIP_STATUS = createField(DSL.name("clip_status"), SQLDataType.VARCHAR(20).defaultValue(DSL.field(DSL.raw("'PROCESSING'::character varying"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>public.evidence_clips.download_url</code>.
     */
    public final TableField<EvidenceClipsRecord, String> DOWNLOAD_URL = createField(DSL.name("download_url"), SQLDataType.VARCHAR(1000), this, "");

    /**
     * The column <code>public.evidence_clips.created_at</code>.
     */
    public final TableField<EvidenceClipsRecord, OffsetDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * The column <code>public.evidence_clips.expires_at</code>.
     */
    public final TableField<EvidenceClipsRecord, OffsetDateTime> EXPIRES_AT = createField(DSL.name("expires_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).defaultValue(DSL.field(DSL.raw("(now() + '7 days'::interval)"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    private EvidenceClips(Name alias, Table<EvidenceClipsRecord> aliased) {
        this(alias, aliased, null);
    }

    private EvidenceClips(Name alias, Table<EvidenceClipsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.evidence_clips</code> table reference
     */
    public EvidenceClips(String alias) {
        this(DSL.name(alias), EVIDENCE_CLIPS);
    }

    /**
     * Create an aliased <code>public.evidence_clips</code> table reference
     */
    public EvidenceClips(Name alias) {
        this(alias, EVIDENCE_CLIPS);
    }

    /**
     * Create a <code>public.evidence_clips</code> table reference
     */
    public EvidenceClips() {
        this(DSL.name("evidence_clips"), null);
    }

    public <O extends Record> EvidenceClips(Table<O> child, ForeignKey<O, EvidenceClipsRecord> key) {
        super(child, key, EVIDENCE_CLIPS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_CLIPS_STATUS_EXPIRES, Indexes.IDX_EVIDENCE_CLIPS_EXPIRES_AT, Indexes.IDX_EVIDENCE_CLIPS_JOB_ID, Indexes.IDX_EVIDENCE_CLIPS_S3_KEY, Indexes.IDX_EVIDENCE_CLIPS_STATUS, Indexes.IDX_EVIDENCE_CLIPS_VIOLATION_ID, Indexes.IDX_EVIDENCE_CLIPS_VIOLATION_UNIQUE, Indexes.IDX_READY_CLIPS);
    }

    @Override
    public UniqueKey<EvidenceClipsRecord> getPrimaryKey() {
        return Keys.EVIDENCE_CLIPS_PKEY;
    }

    @Override
    public List<ForeignKey<EvidenceClipsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.EVIDENCE_CLIPS__EVIDENCE_CLIPS_VIOLATION_ID_FKEY, Keys.EVIDENCE_CLIPS__EVIDENCE_CLIPS_JOB_ID_FKEY);
    }

    private transient ViolationEvents _violationEvents;
    private transient AnalysisJobs _analysisJobs;

    /**
     * Get the implicit join path to the <code>public.violation_events</code>
     * table.
     */
    public ViolationEvents violationEvents() {
        if (_violationEvents == null)
            _violationEvents = new ViolationEvents(this, Keys.EVIDENCE_CLIPS__EVIDENCE_CLIPS_VIOLATION_ID_FKEY);

        return _violationEvents;
    }

    /**
     * Get the implicit join path to the <code>public.analysis_jobs</code>
     * table.
     */
    public AnalysisJobs analysisJobs() {
        if (_analysisJobs == null)
            _analysisJobs = new AnalysisJobs(this, Keys.EVIDENCE_CLIPS__EVIDENCE_CLIPS_JOB_ID_FKEY);

        return _analysisJobs;
    }

    @Override
    public List<Check<EvidenceClipsRecord>> getChecks() {
        return Arrays.asList(
            Internal.createCheck(this, DSL.name("evidence_clips_check"), "((end_time_seconds > start_time_seconds))", true),
            Internal.createCheck(this, DSL.name("evidence_clips_clip_status_check"), "(((clip_status)::text = ANY ((ARRAY['PROCESSING'::character varying, 'READY'::character varying, 'FAILED'::character varying, 'EXPIRED'::character varying])::text[])))", true),
            Internal.createCheck(this, DSL.name("evidence_clips_file_size_bytes_check"), "((file_size_bytes > 0))", true),
            Internal.createCheck(this, DSL.name("evidence_clips_start_time_seconds_check"), "((start_time_seconds >= (0)::numeric))", true)
        );
    }

    @Override
    public EvidenceClips as(String alias) {
        return new EvidenceClips(DSL.name(alias), this);
    }

    @Override
    public EvidenceClips as(Name alias) {
        return new EvidenceClips(alias, this);
    }

    @Override
    public EvidenceClips as(Table<?> alias) {
        return new EvidenceClips(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public EvidenceClips rename(String name) {
        return new EvidenceClips(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public EvidenceClips rename(Name name) {
        return new EvidenceClips(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public EvidenceClips rename(Table<?> name) {
        return new EvidenceClips(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row12 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row12<UUID, UUID, UUID, String, BigDecimal, BigDecimal, BigDecimal, Long, String, String, OffsetDateTime, OffsetDateTime> fieldsRow() {
        return (Row12) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function12<? super UUID, ? super UUID, ? super UUID, ? super String, ? super BigDecimal, ? super BigDecimal, ? super BigDecimal, ? super Long, ? super String, ? super String, ? super OffsetDateTime, ? super OffsetDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function12<? super UUID, ? super UUID, ? super UUID, ? super String, ? super BigDecimal, ? super BigDecimal, ? super BigDecimal, ? super Long, ? super String, ? super String, ? super OffsetDateTime, ? super OffsetDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
