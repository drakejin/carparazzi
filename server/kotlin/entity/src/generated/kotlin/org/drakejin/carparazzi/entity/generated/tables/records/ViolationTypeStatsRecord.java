/*
 * This file is generated by jOOQ.
 */
package org.drakejin.carparazzi.entity.generated.tables.records;


import jakarta.validation.constraints.Size;

import java.math.BigDecimal;

import org.drakejin.carparazzi.entity.generated.tables.ViolationTypeStats;
import org.jooq.Field;
import org.jooq.Record7;
import org.jooq.Row7;
import org.jooq.impl.TableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class ViolationTypeStatsRecord extends TableRecordImpl<ViolationTypeStatsRecord> implements Record7<String, Long, BigDecimal, Long, Long, Long, Long> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.violation_type_stats.violation_type</code>.
     */
    public ViolationTypeStatsRecord setViolationType(String value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.violation_type_stats.violation_type</code>.
     */
    @Size(max = 30)
    public String getViolationType() {
        return (String) get(0);
    }

    /**
     * Setter for <code>public.violation_type_stats.total_count</code>.
     */
    public ViolationTypeStatsRecord setTotalCount(Long value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.violation_type_stats.total_count</code>.
     */
    public Long getTotalCount() {
        return (Long) get(1);
    }

    /**
     * Setter for <code>public.violation_type_stats.avg_confidence</code>.
     */
    public ViolationTypeStatsRecord setAvgConfidence(BigDecimal value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>public.violation_type_stats.avg_confidence</code>.
     */
    public BigDecimal getAvgConfidence() {
        return (BigDecimal) get(2);
    }

    /**
     * Setter for <code>public.violation_type_stats.critical_count</code>.
     */
    public ViolationTypeStatsRecord setCriticalCount(Long value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>public.violation_type_stats.critical_count</code>.
     */
    public Long getCriticalCount() {
        return (Long) get(3);
    }

    /**
     * Setter for <code>public.violation_type_stats.high_count</code>.
     */
    public ViolationTypeStatsRecord setHighCount(Long value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>public.violation_type_stats.high_count</code>.
     */
    public Long getHighCount() {
        return (Long) get(4);
    }

    /**
     * Setter for <code>public.violation_type_stats.medium_count</code>.
     */
    public ViolationTypeStatsRecord setMediumCount(Long value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>public.violation_type_stats.medium_count</code>.
     */
    public Long getMediumCount() {
        return (Long) get(5);
    }

    /**
     * Setter for <code>public.violation_type_stats.low_count</code>.
     */
    public ViolationTypeStatsRecord setLowCount(Long value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>public.violation_type_stats.low_count</code>.
     */
    public Long getLowCount() {
        return (Long) get(6);
    }

    // -------------------------------------------------------------------------
    // Record7 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row7<String, Long, BigDecimal, Long, Long, Long, Long> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    @Override
    public Row7<String, Long, BigDecimal, Long, Long, Long, Long> valuesRow() {
        return (Row7) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return ViolationTypeStats.VIOLATION_TYPE_STATS.VIOLATION_TYPE;
    }

    @Override
    public Field<Long> field2() {
        return ViolationTypeStats.VIOLATION_TYPE_STATS.TOTAL_COUNT;
    }

    @Override
    public Field<BigDecimal> field3() {
        return ViolationTypeStats.VIOLATION_TYPE_STATS.AVG_CONFIDENCE;
    }

    @Override
    public Field<Long> field4() {
        return ViolationTypeStats.VIOLATION_TYPE_STATS.CRITICAL_COUNT;
    }

    @Override
    public Field<Long> field5() {
        return ViolationTypeStats.VIOLATION_TYPE_STATS.HIGH_COUNT;
    }

    @Override
    public Field<Long> field6() {
        return ViolationTypeStats.VIOLATION_TYPE_STATS.MEDIUM_COUNT;
    }

    @Override
    public Field<Long> field7() {
        return ViolationTypeStats.VIOLATION_TYPE_STATS.LOW_COUNT;
    }

    @Override
    public String component1() {
        return getViolationType();
    }

    @Override
    public Long component2() {
        return getTotalCount();
    }

    @Override
    public BigDecimal component3() {
        return getAvgConfidence();
    }

    @Override
    public Long component4() {
        return getCriticalCount();
    }

    @Override
    public Long component5() {
        return getHighCount();
    }

    @Override
    public Long component6() {
        return getMediumCount();
    }

    @Override
    public Long component7() {
        return getLowCount();
    }

    @Override
    public String value1() {
        return getViolationType();
    }

    @Override
    public Long value2() {
        return getTotalCount();
    }

    @Override
    public BigDecimal value3() {
        return getAvgConfidence();
    }

    @Override
    public Long value4() {
        return getCriticalCount();
    }

    @Override
    public Long value5() {
        return getHighCount();
    }

    @Override
    public Long value6() {
        return getMediumCount();
    }

    @Override
    public Long value7() {
        return getLowCount();
    }

    @Override
    public ViolationTypeStatsRecord value1(String value) {
        setViolationType(value);
        return this;
    }

    @Override
    public ViolationTypeStatsRecord value2(Long value) {
        setTotalCount(value);
        return this;
    }

    @Override
    public ViolationTypeStatsRecord value3(BigDecimal value) {
        setAvgConfidence(value);
        return this;
    }

    @Override
    public ViolationTypeStatsRecord value4(Long value) {
        setCriticalCount(value);
        return this;
    }

    @Override
    public ViolationTypeStatsRecord value5(Long value) {
        setHighCount(value);
        return this;
    }

    @Override
    public ViolationTypeStatsRecord value6(Long value) {
        setMediumCount(value);
        return this;
    }

    @Override
    public ViolationTypeStatsRecord value7(Long value) {
        setLowCount(value);
        return this;
    }

    @Override
    public ViolationTypeStatsRecord values(String value1, Long value2, BigDecimal value3, Long value4, Long value5, Long value6, Long value7) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ViolationTypeStatsRecord
     */
    public ViolationTypeStatsRecord() {
        super(ViolationTypeStats.VIOLATION_TYPE_STATS);
    }

    /**
     * Create a detached, initialised ViolationTypeStatsRecord
     */
    public ViolationTypeStatsRecord(String violationType, Long totalCount, BigDecimal avgConfidence, Long criticalCount, Long highCount, Long mediumCount, Long lowCount) {
        super(ViolationTypeStats.VIOLATION_TYPE_STATS);

        setViolationType(violationType);
        setTotalCount(totalCount);
        setAvgConfidence(avgConfidence);
        setCriticalCount(criticalCount);
        setHighCount(highCount);
        setMediumCount(mediumCount);
        setLowCount(lowCount);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised ViolationTypeStatsRecord
     */
    public ViolationTypeStatsRecord(org.drakejin.carparazzi.entity.generated.tables.pojos.ViolationTypeStats value) {
        super(ViolationTypeStats.VIOLATION_TYPE_STATS);

        if (value != null) {
            setViolationType(value.getViolationType());
            setTotalCount(value.getTotalCount());
            setAvgConfidence(value.getAvgConfidence());
            setCriticalCount(value.getCriticalCount());
            setHighCount(value.getHighCount());
            setMediumCount(value.getMediumCount());
            setLowCount(value.getLowCount());
            resetChangedOnNotNull();
        }
    }
}
