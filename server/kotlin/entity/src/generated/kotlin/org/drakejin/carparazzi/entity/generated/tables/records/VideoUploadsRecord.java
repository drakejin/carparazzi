/*
 * This file is generated by jOOQ.
 */
package org.drakejin.carparazzi.entity.generated.tables.records;


import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;

import java.time.OffsetDateTime;
import java.util.UUID;

import org.drakejin.carparazzi.entity.generated.tables.VideoUploads;
import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record10;
import org.jooq.Row10;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class VideoUploadsRecord extends UpdatableRecordImpl<VideoUploadsRecord> implements Record10<UUID, UUID, String, String, Long, Integer, String, String, OffsetDateTime, OffsetDateTime> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.video_uploads.upload_id</code>.
     */
    public VideoUploadsRecord setUploadId(UUID value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.video_uploads.upload_id</code>.
     */
    public UUID getUploadId() {
        return (UUID) get(0);
    }

    /**
     * Setter for <code>public.video_uploads.user_id</code>.
     */
    public VideoUploadsRecord setUserId(UUID value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.video_uploads.user_id</code>.
     */
    @NotNull
    public UUID getUserId() {
        return (UUID) get(1);
    }

    /**
     * Setter for <code>public.video_uploads.original_filename</code>.
     */
    public VideoUploadsRecord setOriginalFilename(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>public.video_uploads.original_filename</code>.
     */
    @NotNull
    @Size(max = 255)
    public String getOriginalFilename() {
        return (String) get(2);
    }

    /**
     * Setter for <code>public.video_uploads.s3_key</code>.
     */
    public VideoUploadsRecord setS3Key(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>public.video_uploads.s3_key</code>.
     */
    @NotNull
    @Size(max = 500)
    public String getS3Key() {
        return (String) get(3);
    }

    /**
     * Setter for <code>public.video_uploads.file_size_bytes</code>.
     */
    public VideoUploadsRecord setFileSizeBytes(Long value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>public.video_uploads.file_size_bytes</code>.
     */
    @NotNull
    public Long getFileSizeBytes() {
        return (Long) get(4);
    }

    /**
     * Setter for <code>public.video_uploads.duration_seconds</code>.
     */
    public VideoUploadsRecord setDurationSeconds(Integer value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>public.video_uploads.duration_seconds</code>.
     */
    public Integer getDurationSeconds() {
        return (Integer) get(5);
    }

    /**
     * Setter for <code>public.video_uploads.file_format</code>.
     */
    public VideoUploadsRecord setFileFormat(String value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>public.video_uploads.file_format</code>.
     */
    @NotNull
    @Size(max = 10)
    public String getFileFormat() {
        return (String) get(6);
    }

    /**
     * Setter for <code>public.video_uploads.upload_status</code>.
     */
    public VideoUploadsRecord setUploadStatus(String value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>public.video_uploads.upload_status</code>.
     */
    @Size(max = 20)
    public String getUploadStatus() {
        return (String) get(7);
    }

    /**
     * Setter for <code>public.video_uploads.uploaded_at</code>.
     */
    public VideoUploadsRecord setUploadedAt(OffsetDateTime value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for <code>public.video_uploads.uploaded_at</code>.
     */
    public OffsetDateTime getUploadedAt() {
        return (OffsetDateTime) get(8);
    }

    /**
     * Setter for <code>public.video_uploads.completed_at</code>.
     */
    public VideoUploadsRecord setCompletedAt(OffsetDateTime value) {
        set(9, value);
        return this;
    }

    /**
     * Getter for <code>public.video_uploads.completed_at</code>.
     */
    public OffsetDateTime getCompletedAt() {
        return (OffsetDateTime) get(9);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<UUID> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record10 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row10<UUID, UUID, String, String, Long, Integer, String, String, OffsetDateTime, OffsetDateTime> fieldsRow() {
        return (Row10) super.fieldsRow();
    }

    @Override
    public Row10<UUID, UUID, String, String, Long, Integer, String, String, OffsetDateTime, OffsetDateTime> valuesRow() {
        return (Row10) super.valuesRow();
    }

    @Override
    public Field<UUID> field1() {
        return VideoUploads.VIDEO_UPLOADS.UPLOAD_ID;
    }

    @Override
    public Field<UUID> field2() {
        return VideoUploads.VIDEO_UPLOADS.USER_ID;
    }

    @Override
    public Field<String> field3() {
        return VideoUploads.VIDEO_UPLOADS.ORIGINAL_FILENAME;
    }

    @Override
    public Field<String> field4() {
        return VideoUploads.VIDEO_UPLOADS.S3_KEY;
    }

    @Override
    public Field<Long> field5() {
        return VideoUploads.VIDEO_UPLOADS.FILE_SIZE_BYTES;
    }

    @Override
    public Field<Integer> field6() {
        return VideoUploads.VIDEO_UPLOADS.DURATION_SECONDS;
    }

    @Override
    public Field<String> field7() {
        return VideoUploads.VIDEO_UPLOADS.FILE_FORMAT;
    }

    @Override
    public Field<String> field8() {
        return VideoUploads.VIDEO_UPLOADS.UPLOAD_STATUS;
    }

    @Override
    public Field<OffsetDateTime> field9() {
        return VideoUploads.VIDEO_UPLOADS.UPLOADED_AT;
    }

    @Override
    public Field<OffsetDateTime> field10() {
        return VideoUploads.VIDEO_UPLOADS.COMPLETED_AT;
    }

    @Override
    public UUID component1() {
        return getUploadId();
    }

    @Override
    public UUID component2() {
        return getUserId();
    }

    @Override
    public String component3() {
        return getOriginalFilename();
    }

    @Override
    public String component4() {
        return getS3Key();
    }

    @Override
    public Long component5() {
        return getFileSizeBytes();
    }

    @Override
    public Integer component6() {
        return getDurationSeconds();
    }

    @Override
    public String component7() {
        return getFileFormat();
    }

    @Override
    public String component8() {
        return getUploadStatus();
    }

    @Override
    public OffsetDateTime component9() {
        return getUploadedAt();
    }

    @Override
    public OffsetDateTime component10() {
        return getCompletedAt();
    }

    @Override
    public UUID value1() {
        return getUploadId();
    }

    @Override
    public UUID value2() {
        return getUserId();
    }

    @Override
    public String value3() {
        return getOriginalFilename();
    }

    @Override
    public String value4() {
        return getS3Key();
    }

    @Override
    public Long value5() {
        return getFileSizeBytes();
    }

    @Override
    public Integer value6() {
        return getDurationSeconds();
    }

    @Override
    public String value7() {
        return getFileFormat();
    }

    @Override
    public String value8() {
        return getUploadStatus();
    }

    @Override
    public OffsetDateTime value9() {
        return getUploadedAt();
    }

    @Override
    public OffsetDateTime value10() {
        return getCompletedAt();
    }

    @Override
    public VideoUploadsRecord value1(UUID value) {
        setUploadId(value);
        return this;
    }

    @Override
    public VideoUploadsRecord value2(UUID value) {
        setUserId(value);
        return this;
    }

    @Override
    public VideoUploadsRecord value3(String value) {
        setOriginalFilename(value);
        return this;
    }

    @Override
    public VideoUploadsRecord value4(String value) {
        setS3Key(value);
        return this;
    }

    @Override
    public VideoUploadsRecord value5(Long value) {
        setFileSizeBytes(value);
        return this;
    }

    @Override
    public VideoUploadsRecord value6(Integer value) {
        setDurationSeconds(value);
        return this;
    }

    @Override
    public VideoUploadsRecord value7(String value) {
        setFileFormat(value);
        return this;
    }

    @Override
    public VideoUploadsRecord value8(String value) {
        setUploadStatus(value);
        return this;
    }

    @Override
    public VideoUploadsRecord value9(OffsetDateTime value) {
        setUploadedAt(value);
        return this;
    }

    @Override
    public VideoUploadsRecord value10(OffsetDateTime value) {
        setCompletedAt(value);
        return this;
    }

    @Override
    public VideoUploadsRecord values(UUID value1, UUID value2, String value3, String value4, Long value5, Integer value6, String value7, String value8, OffsetDateTime value9, OffsetDateTime value10) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached VideoUploadsRecord
     */
    public VideoUploadsRecord() {
        super(VideoUploads.VIDEO_UPLOADS);
    }

    /**
     * Create a detached, initialised VideoUploadsRecord
     */
    public VideoUploadsRecord(UUID uploadId, UUID userId, String originalFilename, String s3Key, Long fileSizeBytes, Integer durationSeconds, String fileFormat, String uploadStatus, OffsetDateTime uploadedAt, OffsetDateTime completedAt) {
        super(VideoUploads.VIDEO_UPLOADS);

        setUploadId(uploadId);
        setUserId(userId);
        setOriginalFilename(originalFilename);
        setS3Key(s3Key);
        setFileSizeBytes(fileSizeBytes);
        setDurationSeconds(durationSeconds);
        setFileFormat(fileFormat);
        setUploadStatus(uploadStatus);
        setUploadedAt(uploadedAt);
        setCompletedAt(completedAt);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised VideoUploadsRecord
     */
    public VideoUploadsRecord(org.drakejin.carparazzi.entity.generated.tables.pojos.VideoUploads value) {
        super(VideoUploads.VIDEO_UPLOADS);

        if (value != null) {
            setUploadId(value.getUploadId());
            setUserId(value.getUserId());
            setOriginalFilename(value.getOriginalFilename());
            setS3Key(value.getS3Key());
            setFileSizeBytes(value.getFileSizeBytes());
            setDurationSeconds(value.getDurationSeconds());
            setFileFormat(value.getFileFormat());
            setUploadStatus(value.getUploadStatus());
            setUploadedAt(value.getUploadedAt());
            setCompletedAt(value.getCompletedAt());
            resetChangedOnNotNull();
        }
    }
}
