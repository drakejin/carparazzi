/*
 * This file is generated by jOOQ.
 */
package org.drakejin.carparazzi.entity.generated.tables.pojos;


import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;

import java.io.Serializable;
import java.time.OffsetDateTime;
import java.util.UUID;

import org.jooq.JSONB;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class AnalysisJobs implements Serializable {

    private static final long serialVersionUID = 1L;

    private final UUID jobId;
    private final UUID uploadId;
    private final String jobStatus;
    private final OffsetDateTime startedAt;
    private final OffsetDateTime completedAt;
    private final Long processingTimeMs;
    private final Integer totalSegments;
    private final Integer totalViolationsDetected;
    private final String errorMessage;
    private final JSONB processingMetadata;

    public AnalysisJobs(AnalysisJobs value) {
        this.jobId = value.jobId;
        this.uploadId = value.uploadId;
        this.jobStatus = value.jobStatus;
        this.startedAt = value.startedAt;
        this.completedAt = value.completedAt;
        this.processingTimeMs = value.processingTimeMs;
        this.totalSegments = value.totalSegments;
        this.totalViolationsDetected = value.totalViolationsDetected;
        this.errorMessage = value.errorMessage;
        this.processingMetadata = value.processingMetadata;
    }

    public AnalysisJobs(
        UUID jobId,
        UUID uploadId,
        String jobStatus,
        OffsetDateTime startedAt,
        OffsetDateTime completedAt,
        Long processingTimeMs,
        Integer totalSegments,
        Integer totalViolationsDetected,
        String errorMessage,
        JSONB processingMetadata
    ) {
        this.jobId = jobId;
        this.uploadId = uploadId;
        this.jobStatus = jobStatus;
        this.startedAt = startedAt;
        this.completedAt = completedAt;
        this.processingTimeMs = processingTimeMs;
        this.totalSegments = totalSegments;
        this.totalViolationsDetected = totalViolationsDetected;
        this.errorMessage = errorMessage;
        this.processingMetadata = processingMetadata;
    }

    /**
     * Getter for <code>public.analysis_jobs.job_id</code>.
     */
    public UUID getJobId() {
        return this.jobId;
    }

    /**
     * Getter for <code>public.analysis_jobs.upload_id</code>.
     */
    @NotNull
    public UUID getUploadId() {
        return this.uploadId;
    }

    /**
     * Getter for <code>public.analysis_jobs.job_status</code>.
     */
    @Size(max = 20)
    public String getJobStatus() {
        return this.jobStatus;
    }

    /**
     * Getter for <code>public.analysis_jobs.started_at</code>.
     */
    public OffsetDateTime getStartedAt() {
        return this.startedAt;
    }

    /**
     * Getter for <code>public.analysis_jobs.completed_at</code>.
     */
    public OffsetDateTime getCompletedAt() {
        return this.completedAt;
    }

    /**
     * Getter for <code>public.analysis_jobs.processing_time_ms</code>.
     */
    public Long getProcessingTimeMs() {
        return this.processingTimeMs;
    }

    /**
     * Getter for <code>public.analysis_jobs.total_segments</code>.
     */
    public Integer getTotalSegments() {
        return this.totalSegments;
    }

    /**
     * Getter for <code>public.analysis_jobs.total_violations_detected</code>.
     */
    public Integer getTotalViolationsDetected() {
        return this.totalViolationsDetected;
    }

    /**
     * Getter for <code>public.analysis_jobs.error_message</code>.
     */
    public String getErrorMessage() {
        return this.errorMessage;
    }

    /**
     * Getter for <code>public.analysis_jobs.processing_metadata</code>.
     */
    public JSONB getProcessingMetadata() {
        return this.processingMetadata;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final AnalysisJobs other = (AnalysisJobs) obj;
        if (this.jobId == null) {
            if (other.jobId != null)
                return false;
        }
        else if (!this.jobId.equals(other.jobId))
            return false;
        if (this.uploadId == null) {
            if (other.uploadId != null)
                return false;
        }
        else if (!this.uploadId.equals(other.uploadId))
            return false;
        if (this.jobStatus == null) {
            if (other.jobStatus != null)
                return false;
        }
        else if (!this.jobStatus.equals(other.jobStatus))
            return false;
        if (this.startedAt == null) {
            if (other.startedAt != null)
                return false;
        }
        else if (!this.startedAt.equals(other.startedAt))
            return false;
        if (this.completedAt == null) {
            if (other.completedAt != null)
                return false;
        }
        else if (!this.completedAt.equals(other.completedAt))
            return false;
        if (this.processingTimeMs == null) {
            if (other.processingTimeMs != null)
                return false;
        }
        else if (!this.processingTimeMs.equals(other.processingTimeMs))
            return false;
        if (this.totalSegments == null) {
            if (other.totalSegments != null)
                return false;
        }
        else if (!this.totalSegments.equals(other.totalSegments))
            return false;
        if (this.totalViolationsDetected == null) {
            if (other.totalViolationsDetected != null)
                return false;
        }
        else if (!this.totalViolationsDetected.equals(other.totalViolationsDetected))
            return false;
        if (this.errorMessage == null) {
            if (other.errorMessage != null)
                return false;
        }
        else if (!this.errorMessage.equals(other.errorMessage))
            return false;
        if (this.processingMetadata == null) {
            if (other.processingMetadata != null)
                return false;
        }
        else if (!this.processingMetadata.equals(other.processingMetadata))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.jobId == null) ? 0 : this.jobId.hashCode());
        result = prime * result + ((this.uploadId == null) ? 0 : this.uploadId.hashCode());
        result = prime * result + ((this.jobStatus == null) ? 0 : this.jobStatus.hashCode());
        result = prime * result + ((this.startedAt == null) ? 0 : this.startedAt.hashCode());
        result = prime * result + ((this.completedAt == null) ? 0 : this.completedAt.hashCode());
        result = prime * result + ((this.processingTimeMs == null) ? 0 : this.processingTimeMs.hashCode());
        result = prime * result + ((this.totalSegments == null) ? 0 : this.totalSegments.hashCode());
        result = prime * result + ((this.totalViolationsDetected == null) ? 0 : this.totalViolationsDetected.hashCode());
        result = prime * result + ((this.errorMessage == null) ? 0 : this.errorMessage.hashCode());
        result = prime * result + ((this.processingMetadata == null) ? 0 : this.processingMetadata.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("AnalysisJobs (");

        sb.append(jobId);
        sb.append(", ").append(uploadId);
        sb.append(", ").append(jobStatus);
        sb.append(", ").append(startedAt);
        sb.append(", ").append(completedAt);
        sb.append(", ").append(processingTimeMs);
        sb.append(", ").append(totalSegments);
        sb.append(", ").append(totalViolationsDetected);
        sb.append(", ").append(errorMessage);
        sb.append(", ").append(processingMetadata);

        sb.append(")");
        return sb.toString();
    }
}
