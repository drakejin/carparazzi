/*
 * This file is generated by jOOQ.
 */
package org.drakejin.carparazzi.entity.generated.tables;


import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import java.util.function.Function;

import org.drakejin.carparazzi.entity.generated.Indexes;
import org.drakejin.carparazzi.entity.generated.Keys;
import org.drakejin.carparazzi.entity.generated.Public;
import org.drakejin.carparazzi.entity.generated.tables.records.VideoUploadsRecord;
import org.jooq.Check;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function10;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class VideoUploads extends TableImpl<VideoUploadsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.video_uploads</code>
     */
    public static final VideoUploads VIDEO_UPLOADS = new VideoUploads();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<VideoUploadsRecord> getRecordType() {
        return VideoUploadsRecord.class;
    }

    /**
     * The column <code>public.video_uploads.upload_id</code>.
     */
    public final TableField<VideoUploadsRecord, UUID> UPLOAD_ID = createField(DSL.name("upload_id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field(DSL.raw("gen_random_uuid()"), SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.video_uploads.user_id</code>.
     */
    public final TableField<VideoUploadsRecord, UUID> USER_ID = createField(DSL.name("user_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.video_uploads.original_filename</code>.
     */
    public final TableField<VideoUploadsRecord, String> ORIGINAL_FILENAME = createField(DSL.name("original_filename"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.video_uploads.s3_key</code>.
     */
    public final TableField<VideoUploadsRecord, String> S3_KEY = createField(DSL.name("s3_key"), SQLDataType.VARCHAR(500).nullable(false), this, "");

    /**
     * The column <code>public.video_uploads.file_size_bytes</code>.
     */
    public final TableField<VideoUploadsRecord, Long> FILE_SIZE_BYTES = createField(DSL.name("file_size_bytes"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.video_uploads.duration_seconds</code>.
     */
    public final TableField<VideoUploadsRecord, Integer> DURATION_SECONDS = createField(DSL.name("duration_seconds"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.video_uploads.file_format</code>.
     */
    public final TableField<VideoUploadsRecord, String> FILE_FORMAT = createField(DSL.name("file_format"), SQLDataType.VARCHAR(10).nullable(false), this, "");

    /**
     * The column <code>public.video_uploads.upload_status</code>.
     */
    public final TableField<VideoUploadsRecord, String> UPLOAD_STATUS = createField(DSL.name("upload_status"), SQLDataType.VARCHAR(20).defaultValue(DSL.field(DSL.raw("'UPLOADING'::character varying"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>public.video_uploads.uploaded_at</code>.
     */
    public final TableField<VideoUploadsRecord, OffsetDateTime> UPLOADED_AT = createField(DSL.name("uploaded_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * The column <code>public.video_uploads.completed_at</code>.
     */
    public final TableField<VideoUploadsRecord, OffsetDateTime> COMPLETED_AT = createField(DSL.name("completed_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    private VideoUploads(Name alias, Table<VideoUploadsRecord> aliased) {
        this(alias, aliased, null);
    }

    private VideoUploads(Name alias, Table<VideoUploadsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.video_uploads</code> table reference
     */
    public VideoUploads(String alias) {
        this(DSL.name(alias), VIDEO_UPLOADS);
    }

    /**
     * Create an aliased <code>public.video_uploads</code> table reference
     */
    public VideoUploads(Name alias) {
        this(alias, VIDEO_UPLOADS);
    }

    /**
     * Create a <code>public.video_uploads</code> table reference
     */
    public VideoUploads() {
        this(DSL.name("video_uploads"), null);
    }

    public <O extends Record> VideoUploads(Table<O> child, ForeignKey<O, VideoUploadsRecord> key) {
        super(child, key, VIDEO_UPLOADS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_VIDEO_UPLOADS_S3_KEY, Indexes.IDX_VIDEO_UPLOADS_STATUS, Indexes.IDX_VIDEO_UPLOADS_UPLOADED_AT, Indexes.IDX_VIDEO_UPLOADS_USER_ID);
    }

    @Override
    public UniqueKey<VideoUploadsRecord> getPrimaryKey() {
        return Keys.VIDEO_UPLOADS_PKEY;
    }

    @Override
    public List<ForeignKey<VideoUploadsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.VIDEO_UPLOADS__VIDEO_UPLOADS_USER_ID_FKEY);
    }

    private transient Users _users;

    /**
     * Get the implicit join path to the <code>public.users</code> table.
     */
    public Users users() {
        if (_users == null)
            _users = new Users(this, Keys.VIDEO_UPLOADS__VIDEO_UPLOADS_USER_ID_FKEY);

        return _users;
    }

    @Override
    public List<Check<VideoUploadsRecord>> getChecks() {
        return Arrays.asList(
            Internal.createCheck(this, DSL.name("video_uploads_duration_seconds_check"), "((duration_seconds > 0))", true),
            Internal.createCheck(this, DSL.name("video_uploads_file_format_check"), "(((file_format)::text = ANY ((ARRAY['mp4'::character varying, 'avi'::character varying, 'mov'::character varying])::text[])))", true),
            Internal.createCheck(this, DSL.name("video_uploads_file_size_bytes_check"), "((file_size_bytes > 0))", true),
            Internal.createCheck(this, DSL.name("video_uploads_upload_status_check"), "(((upload_status)::text = ANY ((ARRAY['UPLOADING'::character varying, 'COMPLETED'::character varying, 'FAILED'::character varying])::text[])))", true)
        );
    }

    @Override
    public VideoUploads as(String alias) {
        return new VideoUploads(DSL.name(alias), this);
    }

    @Override
    public VideoUploads as(Name alias) {
        return new VideoUploads(alias, this);
    }

    @Override
    public VideoUploads as(Table<?> alias) {
        return new VideoUploads(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public VideoUploads rename(String name) {
        return new VideoUploads(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public VideoUploads rename(Name name) {
        return new VideoUploads(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public VideoUploads rename(Table<?> name) {
        return new VideoUploads(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<UUID, UUID, String, String, Long, Integer, String, String, OffsetDateTime, OffsetDateTime> fieldsRow() {
        return (Row10) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function10<? super UUID, ? super UUID, ? super String, ? super String, ? super Long, ? super Integer, ? super String, ? super String, ? super OffsetDateTime, ? super OffsetDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function10<? super UUID, ? super UUID, ? super String, ? super String, ? super Long, ? super Integer, ? super String, ? super String, ? super OffsetDateTime, ? super OffsetDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
