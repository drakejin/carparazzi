/*
 * This file is generated by jOOQ.
 */
package org.drakejin.carparazzi.entity.generated.tables;


import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import java.util.function.Function;

import org.drakejin.carparazzi.entity.generated.Indexes;
import org.drakejin.carparazzi.entity.generated.Keys;
import org.drakejin.carparazzi.entity.generated.Public;
import org.drakejin.carparazzi.entity.generated.tables.records.DownloadLogsRecord;
import org.jooq.Check;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function7;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class DownloadLogs extends TableImpl<DownloadLogsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.download_logs</code>
     */
    public static final DownloadLogs DOWNLOAD_LOGS = new DownloadLogs();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DownloadLogsRecord> getRecordType() {
        return DownloadLogsRecord.class;
    }

    /**
     * The column <code>public.download_logs.download_id</code>.
     */
    public final TableField<DownloadLogsRecord, UUID> DOWNLOAD_ID = createField(DSL.name("download_id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field(DSL.raw("gen_random_uuid()"), SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.download_logs.user_id</code>.
     */
    public final TableField<DownloadLogsRecord, UUID> USER_ID = createField(DSL.name("user_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.download_logs.clip_id</code>.
     */
    public final TableField<DownloadLogsRecord, UUID> CLIP_ID = createField(DSL.name("clip_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.download_logs.download_type</code>.
     */
    public final TableField<DownloadLogsRecord, String> DOWNLOAD_TYPE = createField(DSL.name("download_type"), SQLDataType.VARCHAR(20).defaultValue(DSL.field(DSL.raw("'SINGLE'::character varying"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>public.download_logs.downloaded_at</code>.
     */
    public final TableField<DownloadLogsRecord, OffsetDateTime> DOWNLOADED_AT = createField(DSL.name("downloaded_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * The column <code>public.download_logs.user_agent</code>.
     */
    public final TableField<DownloadLogsRecord, String> USER_AGENT = createField(DSL.name("user_agent"), SQLDataType.CLOB, this, "");

    /**
     * @deprecated Unknown data type. If this is a qualified, user-defined type,
     * it may have been excluded from code generation. If this is a built-in
     * type, you can define an explicit {@link org.jooq.Binding} to specify how
     * this type should be handled. Deprecation can be turned off using
     * {@literal <deprecationOnUnknownTypes/>} in your code generator
     * configuration.
     */
    @Deprecated
    public final TableField<DownloadLogsRecord, Object> IP_ADDRESS = createField(DSL.name("ip_address"), org.jooq.impl.DefaultDataType.getDefaultDataType("\"pg_catalog\".\"inet\""), this, "");

    private DownloadLogs(Name alias, Table<DownloadLogsRecord> aliased) {
        this(alias, aliased, null);
    }

    private DownloadLogs(Name alias, Table<DownloadLogsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.download_logs</code> table reference
     */
    public DownloadLogs(String alias) {
        this(DSL.name(alias), DOWNLOAD_LOGS);
    }

    /**
     * Create an aliased <code>public.download_logs</code> table reference
     */
    public DownloadLogs(Name alias) {
        this(alias, DOWNLOAD_LOGS);
    }

    /**
     * Create a <code>public.download_logs</code> table reference
     */
    public DownloadLogs() {
        this(DSL.name("download_logs"), null);
    }

    public <O extends Record> DownloadLogs(Table<O> child, ForeignKey<O, DownloadLogsRecord> key) {
        super(child, key, DOWNLOAD_LOGS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_DOWNLOAD_LOGS_CLIP_ID, Indexes.IDX_DOWNLOAD_LOGS_DOWNLOADED_AT, Indexes.IDX_DOWNLOAD_LOGS_IP_ADDRESS, Indexes.IDX_DOWNLOAD_LOGS_USER_ID);
    }

    @Override
    public UniqueKey<DownloadLogsRecord> getPrimaryKey() {
        return Keys.DOWNLOAD_LOGS_PKEY;
    }

    @Override
    public List<ForeignKey<DownloadLogsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.DOWNLOAD_LOGS__DOWNLOAD_LOGS_USER_ID_FKEY, Keys.DOWNLOAD_LOGS__DOWNLOAD_LOGS_CLIP_ID_FKEY);
    }

    private transient Users _users;
    private transient EvidenceClips _evidenceClips;

    /**
     * Get the implicit join path to the <code>public.users</code> table.
     */
    public Users users() {
        if (_users == null)
            _users = new Users(this, Keys.DOWNLOAD_LOGS__DOWNLOAD_LOGS_USER_ID_FKEY);

        return _users;
    }

    /**
     * Get the implicit join path to the <code>public.evidence_clips</code>
     * table.
     */
    public EvidenceClips evidenceClips() {
        if (_evidenceClips == null)
            _evidenceClips = new EvidenceClips(this, Keys.DOWNLOAD_LOGS__DOWNLOAD_LOGS_CLIP_ID_FKEY);

        return _evidenceClips;
    }

    @Override
    public List<Check<DownloadLogsRecord>> getChecks() {
        return Arrays.asList(
            Internal.createCheck(this, DSL.name("download_logs_download_type_check"), "(((download_type)::text = ANY ((ARRAY['SINGLE'::character varying, 'BATCH'::character varying, 'ZIP'::character varying])::text[])))", true)
        );
    }

    @Override
    public DownloadLogs as(String alias) {
        return new DownloadLogs(DSL.name(alias), this);
    }

    @Override
    public DownloadLogs as(Name alias) {
        return new DownloadLogs(alias, this);
    }

    @Override
    public DownloadLogs as(Table<?> alias) {
        return new DownloadLogs(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public DownloadLogs rename(String name) {
        return new DownloadLogs(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DownloadLogs rename(Name name) {
        return new DownloadLogs(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public DownloadLogs rename(Table<?> name) {
        return new DownloadLogs(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<UUID, UUID, UUID, String, OffsetDateTime, String, Object> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function7<? super UUID, ? super UUID, ? super UUID, ? super String, ? super OffsetDateTime, ? super String, ? super Object, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function7<? super UUID, ? super UUID, ? super UUID, ? super String, ? super OffsetDateTime, ? super String, ? super Object, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
